<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>http://spsharman.github.io/myblog/</link>
    <atom:link href="http://spsharman.github.io/myblog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 05 Apr 2018 23:20:54 +0100</pubDate>
    <lastBuildDate>Thu, 05 Apr 2018 23:20:54 +0100</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>ACI: Tenants, VRFs, BDs, and EPGs</title>
        <description>&lt;p&gt;In this post we’re going to take a high level look at some of the building blocks that are used when configuring an ACI network. If you’re coming from a traditional networking background you should easily be able to map the ACI constructs with standard NXOS constructs.&lt;/p&gt;

&lt;h2 id=&quot;tenants&quot;&gt;Tenants&lt;/h2&gt;
&lt;p&gt;Tenants are simply fabric wide configuration “zones” on the network which can be used represent different environments such as “Production” and “Pre-Production”. There are three built in Tenants (infra, mgmt, common), objects that are built in the “common” Tenant can be consumed by other Tenants.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture1.png&quot; style=&quot;width:100% !important;height:100% !important;&quot; /&gt;&lt;/p&gt;

&lt;!--
&lt;a href=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture1.png&quot; data-lightbox=&quot;picture1-large&quot; data-title=&quot;&quot;&gt;
&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture1.png&quot; style=&quot;width:100%; height:100%;&quot; /&gt;
&lt;/a&gt;
--&gt;

&lt;p&gt;You can think of an ACI Tenant as being &lt;em&gt;similar&lt;/em&gt; to a VDC on a Nexus 7k, however one major difference is that when configuring an ACI Tenant you don’t reserve blocks of interfaces.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;vrfs&quot;&gt;VRFs&lt;/h2&gt;
&lt;p&gt;VRFs on an ACI fabric are really just the same as a VRF on any other network device. What’s nice with an ACI network is that when you define a VRF it’s automatically available on every leaf switch in the fabric.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture2.png&quot; style=&quot;width:100% !important;height:100% !important;&quot; /&gt;&lt;/p&gt;

&lt;!--
&lt;a href=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture2.png&quot; data-lightbox=&quot;picture2-large&quot; data-title=&quot;&quot;&gt;
&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture2.png&quot; style=&quot;width:100%; height:100%;&quot; /&gt;
&lt;/a&gt;
--&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apic1# show vrf
 Tenant      Vrf         Consumed Contracts    Provided Contracts    Description                              
 ----------  ----------  --------------------  --------------------  ----------------------------------------
 Ciscolive   vrf-01      -                     permit_to_Active_Dir                                           
                                               ectory                                                         
 common      copy        -                     -                                                              
 common      default     -                     -                                                              
 common      vrf-01      -                     -                                                              
 infra       ave-ctrl    -                     -                                                              
 infra       overlay-1   -                     -                                                              
 iomart      vrf-01      -                     -                                                              
 iomart      vrf-02      -                     -                                                              
 mgmt        inb         -                     -                                                              
 mgmt        oob         -                     -                                                              
 micdoher    vrf-01      -                     -                                                              
 rwhitear    vrf-01      -                     -                                                              
 ssharman    vrf-01      -                     -                                                              
 ssharman    vrf-02      -                     -                                                              
 ssharman    vrf-03      -                     -                                                              
 ssharman    vrf-04      -                     -                                                              
apic1#
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;bridge-domains-vrfs&quot;&gt;Bridge Domains (VRFs)&lt;/h2&gt;
&lt;p&gt;Bridge Domains are layer 2 segments (under the covers they’re switch local VLANs) which are carried over the ACI fabric in VXLAN frames.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture3.png&quot; style=&quot;width:100% !important;height:100% !important;&quot; /&gt;&lt;/p&gt;

&lt;!--
&lt;a href=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture3.png&quot; data-lightbox=&quot;picture3-large&quot; data-title=&quot;&quot;&gt;
&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture3.png&quot; style=&quot;width:100%; height:100%;&quot; /&gt;
&lt;/a&gt;
--&gt;

&lt;p&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;fabric XYZ show vlan extended&lt;/code&gt; command on two different switches I can see the Encap (incoming) VLAN and the switch local VLAN.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apic1# fabric 101 show vlan extended
----------------------------------------------------------------
 Node 101 (Leaf-101)
----------------------------------------------------------------

 VLAN Name                             Encap            Ports
 ---- -------------------------------- ---------------- ------------------------
 1    rwhitear:UCSD:6.5                vlan-2077        Eth1/21
 2    ssharman:test:bob                vlan-2075        Eth1/21
 9    infra:default                    vxlan-16777209,  Eth1/1, Eth1/11,
                                       vlan-3967        Eth1/21, Eth1/22, Po1
 11   common:10.52.248.192_27          vxlan-16252850   Eth1/21
 12   common:outside_vlan-8_host-mgmt  vxlan-15237054   Eth1/11, Eth1/21,
                                                        Eth1/22, Po1
 13   common:outside_vlans:vlan-       vlan-8           Eth1/11, Eth1/21,
      8_host-mgmt                                       Eth1/22, Po1
 15   rwhitear:Candid:candid-          vlan-2076        Eth1/21
      prod.0.9.1.832
 17   ssharman:192.168.10.x_24         vxlan-16580489   Eth1/21, Eth1/22
 18   ssharman:esx-infrastructure      vlan-2000        Eth1/21, Eth1/22
      :Host-mgmt
apic1#
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apic1# fabric 102 show vlan extended
----------------------------------------------------------------
 Node 102 (Leaf-102)
----------------------------------------------------------------

 VLAN Name                             Encap            Ports
 ---- -------------------------------- ---------------- ------------------------
 9    infra:default                    vxlan-16777209,  Eth1/1, Eth1/11,
                                       vlan-3967        Eth1/21, Eth1/22, Po1
 11   common:10.52.248.192_27          vxlan-16252850   Eth1/21, Eth1/22
 12   common:outside_vlan-8_host-mgmt  vxlan-15237054   Eth1/11, Eth1/21,
                                                        Eth1/22, Po1
 13   common:outside_vlans:vlan-       vlan-8           Eth1/11, Eth1/21,
      8_host-mgmt                                       Eth1/22, Po1
 14   ssharman:outside_infra-          vxlan-15433636   Eth1/11, Eth1/21,
      ssharman-29                                       Eth1/22, Po1
 15   ssharman:lab-infrastructure      vlan-29          Eth1/11, Eth1/21,
      :infra-ssharman-29                                Eth1/22, Po1
 16   micdoher:KUBaM:KUBaM             vlan-2066        Eth1/22
 18   ssharman:192.168.10.x_24         vxlan-16580489   Eth1/21, Eth1/22
 19   ssharman:esx-infrastructure      vlan-2000        Eth1/21, Eth1/22
      :Host-mgmt
apic1#
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Understanding the relationship between an incoming (Encap) VLAN, and a switch local VLAN is extremely important because when using switch show commands you must specify the switch local VLAN.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Bridge Domains may (or may not) have an associated anycast IP gateway - think VLAN 10, Interface VLAN 10.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apic1# fabric 101 show ip interface vlan 17
----------------------------------------------------------------
 Node 101 (Leaf-101)
----------------------------------------------------------------
IP Interface Status for VRF &quot;ssharman:vrf-01&quot;
vlan17, Interface status: protocol-up/link-up/admin-up, iod: 136, mode: pervasive
  IP address: 192.168.10.1, IP subnet: 192.168.10.0/24
  IP broadcast address: 255.255.255.255
  IP primary address route-preference: 1, tag: 0


apic1# fabric 102 show ip interface vlan 18
----------------------------------------------------------------
 Node 102 (Leaf-102)
----------------------------------------------------------------
IP Interface Status for VRF &quot;ssharman:vrf-01&quot;
vlan18, Interface status: protocol-up/link-up/admin-up, iod: 134, mode: pervasive
  IP address: 192.168.10.1, IP subnet: 192.168.10.0/24
  IP broadcast address: 255.255.255.255
  IP primary address route-preference: 1, tag: 0


apic1#
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;endpoint-groups-epgs-and-contracts&quot;&gt;Endpoint Groups (EPGs) and Contracts&lt;/h2&gt;
&lt;p&gt;EPGs are “security bubbles” for network attached devices. Admission to an EPG is based on switch/interface/VLAN or virtual switch, for example VLAN 10 on interface 101/1/1 = EPG web.&lt;/p&gt;

&lt;p&gt;EPGs are mapped to a single Bridge Domain.&lt;/p&gt;

&lt;p&gt;Communication between EPGs is disabled by default, permitting communication requires a Contract (ACL).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture4.png&quot; style=&quot;width:100% !important;height:100% !important;&quot; /&gt;&lt;/p&gt;

&lt;!--
&lt;a href=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture4.png&quot; data-lightbox=&quot;picture4-large&quot; data-title=&quot;&quot;&gt;
&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture4.png&quot; style=&quot;width:100%; height:100%;&quot; /&gt;
&lt;/a&gt;
--&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;application-profiles&quot;&gt;Application Profiles&lt;/h2&gt;
&lt;p&gt;An Application Profile is simply a collection of EPGs and Contracts which may or may not represent an Application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture5.png&quot; style=&quot;width:100% !important;height:100% !important;&quot; /&gt;&lt;/p&gt;

&lt;!--
&lt;a href=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture5.png&quot; data-lightbox=&quot;picture5-large&quot; data-title=&quot;&quot;&gt;
&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture5.png&quot; style=&quot;width:100%; height:100%;&quot; /&gt;
&lt;/a&gt;
--&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;pulling-this-all-together&quot;&gt;Pulling this all together…&lt;/h2&gt;
&lt;p&gt;When building an ACI network a decision needs to be made where to configure the different objects.&lt;/p&gt;

&lt;p&gt;Many customers build their forwarding functions (VRFs and Bridge Domains) in the “common” tenant and place their Application Profiles and EPGs in a “user” tenant.&lt;/p&gt;

&lt;p&gt;Alternatively customers may place their VRFs, BDs, App Profiles, and EPGs all in a single tenant.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture6.png&quot; style=&quot;width:100% !important;height:100% !important;&quot; /&gt;&lt;/p&gt;

&lt;!--
&lt;a href=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture6.png&quot; data-lightbox=&quot;picture6-large&quot; data-title=&quot;&quot;&gt;
&lt;img src=&quot;/myblog/assets/aci-tenants-vrfs-bds-epgs/old-images/picture6.png&quot; style=&quot;width:100%; height:100%;&quot; /&gt;
&lt;/a&gt;
--&gt;
</description>
        <pubDate>Thu, 05 Apr 2018 01:00:00 +0100</pubDate>
        <link>http://spsharman.github.io/myblog/aci/2018/04/05/aci-tenants-vrfs-bds-epgs.html</link>
        <guid isPermaLink="true">http://spsharman.github.io/myblog/aci/2018/04/05/aci-tenants-vrfs-bds-epgs.html</guid>
        
        <category>ACI</category>
        
        
        <category>ACI</category>
        
      </item>
    
      <item>
        <title>ACI: Using Leaf Profiles</title>
        <description>&lt;p&gt;In my previous &lt;a href=&quot;http://spsharman.github.io/myblog/aci/2018/03/23/ACI-Configuring-network-interfaces.html&quot;&gt;post&lt;/a&gt; we looked at Leaf Profiles which contain a collection of Interfaces Selectors which in turn contain the physical interface(s) e.g. eth1/1.&lt;/p&gt;

&lt;p&gt;There are two ways of using Leaf Profiles (Interface Policies)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Device Centric Leaf Profiles&lt;/li&gt;
  &lt;li&gt;Switch Centric Leaf Profiles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You won’t find either of these terms in the documentation because I’ve completely made them up :)&lt;/p&gt;

&lt;h1 id=&quot;device-centric-mode&quot;&gt;Device Centric Mode&lt;/h1&gt;
&lt;p&gt;I use the term Device Centric Leaf Profile to describe a Leaf Profile which has been constructed based on the type of device attaching to the network.&lt;/p&gt;

&lt;p&gt;For example I might build a Leaf Profile which defines the interfaces used when my ESX Hosts connect to the network:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-using-leaf-profiles/picture1.png&quot; style=&quot;width:100% !important;height:100% !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leaf Profile:&lt;/strong&gt; ESX_Hosts&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interface Selectors&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interfaces&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interface Policy Group&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interface Policies&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Interface_Range&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth1/1-6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ESX_Hosts&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cdp_enabled&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively I might configure in this way where I specify the individual interfaces as opposed to a range of interfaces:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interface Selector&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interfaces&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interface Policy Group&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interface Policies&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth1/1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ESX_Hosts&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cdp_enabled&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth1/2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ESX_Hosts&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cdp_enabled&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth1/3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ESX_Hosts&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cdp_enabled&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth1/4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ESX_Hosts&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cdp_enabled&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth1/5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ESX_Hosts&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cdp_enabled&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth1/6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ESX_Hosts&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cdp_enabled&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;What’s nice with a Device Centric Model is that every physical switch where I attach the ESX_Hosts Profile will have interfaces 1/1-6 configured.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-using-leaf-profiles/picture2.png&quot; style=&quot;width:100% !important;height:100% !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;switch-centric-mode&quot;&gt;Switch Centric Mode&lt;/h1&gt;
&lt;p&gt;I use the term Switch Centric Leaf Profile to describe a Leaf Profile which has been constructed based on the target switch.&lt;/p&gt;

&lt;p&gt;For example I might build a Leaf Profile which defines the interfaces for a specific switch:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-using-leaf-profiles/picture3.png&quot; style=&quot;width:100% !important;height:100% !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leaf Profile:&lt;/strong&gt; Leaf_101&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interface Selector&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interfaces&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interface Policy Group&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Interface Policies&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Interface_Range&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth1/1-3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ESX_Hosts&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cdp_enabled&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Interface_Range&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth1/11-13&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Linux_Hosts&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cdp_enabled&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Interface_Range&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;eth1/21-23&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Windows_Hosts&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cdp_enabled&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;What’s nice with this approach is that I have ultimate flexibility, the downside is that I would have to repeat the configuration for each switch (or pair of switches) in the network:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-using-leaf-profiles/picture4.png&quot; style=&quot;width:100% !important;height:100% !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;There’s a no right or wrong way of using Leaf Profiles, in fact you’ll likely use both methods.&lt;/p&gt;

&lt;p&gt;If you take the first approach you’ll (potentially) have less configuration, however if you take the second approach you’ll (potentially) have more configuration.&lt;/p&gt;

&lt;p&gt;My personal choice is to use a Device Centric approach for compute switches, and a Switch Centric approach for edge racks where lots of flexibility is required.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Mar 2018 23:49:00 +0100</pubDate>
        <link>http://spsharman.github.io/myblog/aci/2018/03/26/aci-using-leaf-profiles.html</link>
        <guid isPermaLink="true">http://spsharman.github.io/myblog/aci/2018/03/26/aci-using-leaf-profiles.html</guid>
        
        <category>ACI</category>
        
        
        <category>ACI</category>
        
      </item>
    
      <item>
        <title>ACI: Configuring network interfaces</title>
        <description>&lt;p&gt;ACI interface configuration is achieved by defining a series of related policies (Managed Objects) which are modeled in a logical “space” before being applied to one or more physical switches.&lt;/p&gt;

&lt;p&gt;The ability to model once and apply many times is a key feature of an ACI fabric.&lt;/p&gt;

&lt;p&gt;Configuring switch interfaces is really easy to do once you understand the MO model (shown below). In fact if you’re used to configuring a switch you just need to translate something that you already know to the language of ACI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-configuring-network-interfaces/object-model.png&quot; style=&quot;width:100% !important;height:100% !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First you need to navigate to Fabric | Access Polices…..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/myblog/assets/aci-configuring-network-interfaces/fabric-access-policies.png&quot; style=&quot;width:40% !important;height:40% !important;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…..and then working from the bottom up it’s time to do some configuration - it’s always worth tidying up and closing the folders as you go along.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VLAN Pools&lt;/strong&gt; are simply a list of VLANs that can be used on the fabric. The VLANs can either be preconfigured within a pool or they can be added to the pool as required - just like configuring a VLAN range on any other switch.&lt;/p&gt;

&lt;p&gt;There are two types of VLAN pools, either static or dynamic.&lt;/p&gt;

&lt;p&gt;I personally like to create a dynamic pool with static ranges.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Static VLANs are allocated manually by the system administrator to match an incoming VLAN ID on given interfaces.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dynamic VLANs are allocated by APIC to automatically configure an EPG. For example APIC can automatically push a VLANs to a VMware port group or to a firewall for service insertion.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Domains&lt;/strong&gt; are a security function which restricts where VLANs can be consumed, for example the VLANs in Pool X consumed by physical servers.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attachable Access Entity Profiles&lt;/strong&gt; otherwise known as (AAEPs) map VLANs from a given VLAN pool to a Leaf Policy Group which is simply an interface template.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interface Policies&lt;/strong&gt; are the settings that you want to apply to an interface, e.g. interface speed, cdp, lldp, VLAN significance etc.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leaf Policy Groups&lt;/strong&gt; are a combination of Interface Policies such as interface speed, cdp, lldp, VLAN significance etc. Leaf Policy Groups either be of type Access, Port-Channel, or Virtual Port-Channel.&lt;/p&gt;

&lt;p&gt;It’s important to understand that Leaf Policy Groups of type Access can be used across many interfaces, whereas Leaf Policy Groups of type Port-Channel and Virtual Port-Channel have to be unique per attached device because under the covers a unique port-channel ID is created.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leaf Profiles (Interface Policies)&lt;/strong&gt; are a collection of Interfaces Selectors which in turn contain the physical interface e.g. eth1/1.&lt;/p&gt;

&lt;p&gt;The actual interfaces are configured by mapping a Leaf Policy Group to a given interface ID. Leaf Profiles can be mapped to one or more switches (Leaf Profile | Switch Policies).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leaf Profiles (Switch Policies)&lt;/strong&gt; represent one or more physical switches where Leaf Profiles (Interface Policies) are applied, for example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Leafs_1_and_2&lt;/li&gt;
  &lt;li&gt;Leafs_3_and_4&lt;/li&gt;
  &lt;li&gt;Leafs_1_to_4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After reading this I’m sure that you think that it’s a lot of work to do, and to be fair if you were configuring a single interface on a single switch there are a lot of steps to do. That said, once you’ve made one template you can re-use it time and again.&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Mar 2018 09:41:00 +0000</pubDate>
        <link>http://spsharman.github.io/myblog/aci/2018/03/23/aci-configuring-network-interfaces.html</link>
        <guid isPermaLink="true">http://spsharman.github.io/myblog/aci/2018/03/23/aci-configuring-network-interfaces.html</guid>
        
        <category>ACI</category>
        
        
        <category>ACI</category>
        
      </item>
    
      <item>
        <title>Jekyll notes</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://spsharman.github.io/myblog/assets/aci-blog-1/object-model.png&quot; alt=&quot;object-model&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://spsharman.github.io/myblog/assets/aci-blog-1/fabric-access-policies.png&quot; alt=&quot;fabric-access-policies&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Mar 2018 09:41:00 +0000</pubDate>
        <link>http://spsharman.github.io/myblog/2018/03/23/jekyll-notes.html</link>
        <guid isPermaLink="true">http://spsharman.github.io/myblog/2018/03/23/jekyll-notes.html</guid>
        
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;h2 id=&quot;adding-new-posts&quot;&gt;Adding New Posts&lt;/h2&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;h3 id=&quot;tags-and-categories&quot;&gt;Tags and Categories&lt;/h3&gt;

&lt;p&gt;If you list one or more categories or tags in the front matter of your post, they will be included with the post on the page as links. Clicking the link will bring you to an auto-generated archive page for the category or tag, created using the &lt;a href=&quot;https://github.com/jekyll/jekyll-archives&quot;&gt;jekyll-archive&lt;/a&gt; gem.&lt;/p&gt;

&lt;h3 id=&quot;cover-images&quot;&gt;Cover Images&lt;/h3&gt;

&lt;p&gt;To add a cover image to your post, set the “cover” property in the front matter with the relative URL of the image (i.e. &lt;code&gt;cover: &quot;/assets/cover_image.jpg&quot;&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;code-snippets&quot;&gt;Code Snippets&lt;/h3&gt;

&lt;p&gt;You can use &lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt; to add syntax highlight code snippets:&lt;/p&gt;

&lt;p&gt;Use the &lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;Liquid&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;highlight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;language&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; tag to add syntax highlighting to code snippets.&lt;/p&gt;

&lt;p&gt;For instance, this template…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% highlight javascript %}    
function demo(string, times) {    
  for (var i = 0; i &lt;span class=&quot;nt&quot;&gt;&amp;lt; times&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;na&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;    
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;    
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;    
&lt;span class=&quot;na&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;endhighlight&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…will come out looking like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Syntax highlighting is done using &lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt;. You can change the active theme in &lt;a href=&quot;https://github.com/bencentra/centrarium/blob/2dcd73d09e104c3798202b0e14c1db9fa6e77bc7/_includes/head.html#L15&quot;&gt;head.html&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;

&lt;p&gt;Lightbox has been enabled for images. To create the link that’ll launch the lightbox, add &lt;code&gt;data-lightbox&lt;/code&gt; and &lt;code&gt;data-title&lt;/code&gt; attributes to an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag around your &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag. The result is:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//bencentra.com/assets/images/falcon9_large.jpg&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;Check out the Falcon 9 from SpaceX&quot;&gt;
  &lt;img src=&quot;//bencentra.com/assets/images/falcon9_small.jpg&quot; title=&quot;Check out the Falcon 9 from SpaceX&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, check out the &lt;a href=&quot;http://lokeshdhakar.com/projects/lightbox2/&quot;&gt;Lightbox&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 18 Apr 2015 09:43:59 +0100</pubDate>
        <link>http://spsharman.github.io/myblog/jekyll/2015/04/18/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://spsharman.github.io/myblog/jekyll/2015/04/18/welcome-to-jekyll.html</guid>
        
        <category>jekyll</category>
        
        
        <category>Jekyll</category>
        
      </item>
    
      <item>
        <title>image-test</title>
        <description>&lt;p&gt;#Draft blog to test image sizes&lt;/p&gt;

&lt;h2 id=&quot;image-1&quot;&gt;Image 1&lt;/h2&gt;
&lt;p&gt;This is the original image from a screen grab
&lt;img src=&quot;/myblog/assets/aci-blog-1/fabric-access-policies.png&quot; alt=&quot;fabric-access-policies&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;image-2&quot;&gt;Image 2&lt;/h2&gt;
&lt;p&gt;This is the same image edited in seashore to reduce the image size by 50%
&lt;img src=&quot;/myblog/assets/test-image.png&quot; alt=&quot;image-test&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;image-3&quot;&gt;Image 3&lt;/h2&gt;
&lt;p&gt;This is the reduced image where I specify the dimensions on screen
&lt;img src=&quot;/myblog/assets/test-image.png&quot; alt=&quot;image-test&quot; width=&quot;142px&quot; height=&quot;166px&quot; class=&quot;img-responsive&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/myblog/assets/test-image.png&quot; style=&quot;width:50% !important;height:50% !important;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;image-4&quot;&gt;Image 4&lt;/h2&gt;
&lt;p&gt;This is just to prove that the reduction in width doesn’t work
!important &lt;a href=&quot;/myblog/assets/test-image.png&quot; width=&quot;142px&quot; class=&quot;img-responsive&quot;&gt;image-test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://spsharman.github.io/myblog/assets/aci-blog-1/fabric-access-policies.png&quot; alt=&quot;fabric-access-policies&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://spsharman.github.io/myblog/assets/aci-blog-1/object-model.png&quot; alt=&quot;object-model&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Jan 1970 10:00:00 +0100</pubDate>
        <link>http://spsharman.github.io/myblog/1970/01/31/image-test.html</link>
        <guid isPermaLink="true">http://spsharman.github.io/myblog/1970/01/31/image-test.html</guid>
        
        
      </item>
    
      <item>
        <title>Post Template</title>
        <description>&lt;h1 id=&quot;edit-this-template-then-save-as&quot;&gt;Edit this template, then “Save As”&lt;/h1&gt;
</description>
        <pubDate>Sat, 31 Jan 1970 01:00:00 +0100</pubDate>
        <link>http://spsharman.github.io/myblog/template/1970/01/31/post-template.html</link>
        <guid isPermaLink="true">http://spsharman.github.io/myblog/template/1970/01/31/post-template.html</guid>
        
        <category>template</category>
        
        
        <category>template</category>
        
      </item>
    
      <item>
        <title>Jekyll Installation</title>
        <description>&lt;h1 id=&quot;jekyll-installation&quot;&gt;Jekyll Installation&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SSHARMAN-M-35ZJ:GitHub ssharman$ jekyll new blog
Running bundle install in /Users/ssharman/GitHub/blog...
  Bundler: The dependency tzinfo-data (&amp;gt;= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, run `bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java`.
  Bundler: Fetching gem metadata from https://rubygems.org/...........
  Bundler: Fetching gem metadata from https://rubygems.org/.
  Bundler: Resolving dependencies...
  Bundler: Using public_suffix 3.0.2
  Bundler: Using addressable 2.5.2
  Bundler: Using bundler 1.16.1
  Bundler: Using colorator 1.1.0
  Bundler: Using concurrent-ruby 1.0.5
  Bundler: Using eventmachine 1.2.5
  Bundler: Using http_parser.rb 0.6.0
  Bundler: Using em-websocket 0.5.1
  Bundler: Using ffi 1.9.23
  Bundler: Using forwardable-extended 2.6.0
  Bundler: Using i18n 0.9.5
  Bundler: Using rb-fsevent 0.10.3
  Bundler: Using rb-inotify 0.9.10
  Bundler: Using sass-listen 4.0.0
  Bundler: Using sass 3.5.6
  Bundler: Using jekyll-sass-converter 1.5.2
  Bundler: Using ruby_dep 1.5.0
  Bundler: Using listen 3.1.5
  Bundler: Using jekyll-watch 2.0.0
  Bundler: Using kramdown 1.16.2
  Bundler: Using liquid 4.0.0
  Bundler: Using mercenary 0.3.6
  Bundler: Using pathutil 0.16.1
  Bundler: Using rouge 3.1.1
  Bundler: Using safe_yaml 1.0.4
  Bundler: Using jekyll 3.7.3
  Bundler: Using jekyll-feed 0.9.3
  Bundler: Using jekyll-seo-tag 2.4.0
  Bundler: Fetching minima 2.4.1
  Bundler: Installing minima 2.4.1
  Bundler: Bundle complete! 4 Gemfile dependencies, 29 gems now installed.
  Bundler: Use `bundle info [gemname]` to see where a bundled gem is installed.
New jekyll site installed in /Users/ssharman/GitHub/blog.
SSHARMAN-M-35ZJ:GitHub ssharman$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;change-directory-to-blog&quot;&gt;Change directory to /blog&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SSHARMAN-M-35ZJ:GitHub ssharman$ cd blog/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;start-jekyll-locally&quot;&gt;Start Jekyll locally&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SSHARMAN-M-35ZJ:blog ssharman$ bundle exec jekyll serve
Configuration file: /Users/ssharman/GitHub/blog/_config.yml
            Source: /Users/ssharman/GitHub/blog
       Destination: /Users/ssharman/GitHub/blog/_site
 Incremental build: disabled. Enable with --incremental
      Generating...
                    done in 0.649 seconds.
 Auto-regeneration: enabled for '/Users/ssharman/GitHub/blog'
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 31 Jan 1970 01:00:00 +0100</pubDate>
        <link>http://spsharman.github.io/myblog/1970/01/31/jekyll-installation.html</link>
        <guid isPermaLink="true">http://spsharman.github.io/myblog/1970/01/31/jekyll-installation.html</guid>
        
        
      </item>
    
      <item>
        <title>disqus</title>
        <description>&lt;p&gt;Testing out Disqus for comments.&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://spsharman-github-io.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;

</description>
        <pubDate>Sat, 31 Jan 1970 01:00:00 +0100</pubDate>
        <link>http://spsharman.github.io/myblog/test/1970/01/31/disqus.html</link>
        <guid isPermaLink="true">http://spsharman.github.io/myblog/test/1970/01/31/disqus.html</guid>
        
        
        <category>test</category>
        
      </item>
    
  </channel>
</rss>
